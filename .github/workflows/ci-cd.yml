name: CI-CD Pipeline

on:
  push:
    branches: [ "dev" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      # --------------------
      # 1. Security Scan Before Build
      # --------------------
      - name: Trivy FS Scan (source code scan)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          input: .
          ignore-unfixed: true
          format: table
          severity: HIGH,CRITICAL
          exit-code: 0

      # --------------------
      # 2. Build Docker image
      # --------------------
      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_IMAGE }}:${{ github.sha }} .

      # --------------------
      # 3. Security Scan After Build
      # --------------------
      - name: Trivy Image Scan (Docker image scan)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          image-ref: ${{ secrets.DOCKER_IMAGE }}:${{ github.sha }}
          ignore-unfixed: true
          format: table
          severity: HIGH,CRITICAL
          exit-code: 0

      # --------------------
      # 4. SonarQube Scan (Self-Hosted on EC2)
      # --------------------
      - name: Install Sonar Scanner
        run: |
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner-cli-5.0.1.3006-linux.zip
          mv sonar-scanner-5.0.1.3006-linux sonar-scanner
          echo "${GITHUB_WORKSPACE}/sonar-scanner/bin" >> $GITHUB_PATH

      - name: SonarQube Scan
        run: |
          sonar-scanner \
            -Dsonar.projectKey=devops-project \
            -Dsonar.sources=. \
            -Dsonar.host.url=http://52.205.108.187:9000 \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}


      # --------------------
      # 5. Push Docker image
      # --------------------
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_IMAGE }}:${{ github.sha }}
          docker tag ${{ secrets.DOCKER_IMAGE }}:${{ github.sha }} ${{ secrets.DOCKER_IMAGE }}:latest
          docker push ${{ secrets.DOCKER_IMAGE }}:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Create deploy directory if not exists
            mkdir -p ~/deploy
            cd ~/deploy

            # Save deploy.sh (from repo)
            cat <<'EOF' > deploy.sh
            #!/bin/bash
            set -e
            APP_NAME="swiggy-app"
            IMAGE="${DOCKER_IMAGE:-${{ secrets.DOCKER_IMAGE }}:latest}"

            echo "ðŸ”„ Pulling latest Docker image..."
            docker pull $IMAGE

            echo "ðŸ›‘ Stopping old container..."
            docker stop $APP_NAME || true
            docker rm $APP_NAME || true

            echo "ðŸš€ Starting new container..."
            docker run -d -p 80:3000 --name $APP_NAME $IMAGE

            echo "âœ… Deployment complete!"
            EOF

            chmod +x deploy.sh
            ./deploy.sh
